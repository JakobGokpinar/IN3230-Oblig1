send() vs write():
    - write() generic system call, works on any file dp. 
    - send() is socket-spesific

send() vs sendto():
    - sendto() requires to specifiy dest. addr. with each call
    - send() assumes the socket is already conntected, makes sense since we only call connect() once

read() vs recv():
    - same story with send() and write()

SOCK_SEQPACKET vs SOCK_STREAM:
    - sockstream is for TCP
    - seqpacket makes sense for ping/pong super clean, no manual framing

bind()
    - Tells OS where the socket lives. assigns the address specified by sockaddr* addr to the socket referred to by the file desc.

listen()
    - Marks socket as passive, will accept incoming connections

accept()
    - Takes one connection request off the backlog created by listen().

memset()
    -  zero-out struct sockaddr_un before filling it.

epoll() vs select()
    - select() allows a program to monitor several file desc., waiting until one or more file desc, become ready
    - epoll() is more scalable and more efficient than select() in handling multiple file desc.


recvmsg() vs recv():
    - recv() is implest way to receive data from a socket. It just puts bytes into buffer
    - recvmsg() - a more advanced version. you get more metadata

sendmsg() vs send(): 
    - send() simple, sends only one buffer, common for TCP/UDP sockets.
    - sendmsg() - Generalized and more powerful version. Can send multiple buffers at once via struct iovec[]. Uses struct msghdr. We can pass in the raw Ethernet frame (sockaddr_ll) via iovec.

Usage:
ssize_t send(int sockfd, const void *buf, size_t len, int flags);
ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);



So every outgoing frame will have Ethernet header like this:
+-----------------+-----------------+-----------------+
| dst MAC (6B)    | src MAC (6B)    | Ethertype=88B5  |
+-----------------+-----------------+-----------------+
| payload: MIP header + ARP/Ping    |
+-----------------------------------+